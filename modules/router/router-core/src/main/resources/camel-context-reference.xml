<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">


	<bean id="resultsAggregationStrategy" class="com.indracompany.sofia2.router.service.processor.ResultsAggregator" />

	<camelContext id="camel-context-reference" errorHandlerRef="defaultEH" streamCache="true" trace="true" xmlns="http://camel.apache.org/schema/spring">
	
		<errorHandler id="defaultEH">
            <redeliveryPolicy maximumRedeliveries="10" retryAttemptedLogLevel="WARN" redeliveryDelay="5000"/>
        </errorHandler>
        
        <errorHandler id="dlc" type="DeadLetterChannel" deadLetterUri="log:DLC">
            <redeliveryPolicy maximumRedeliveries="5" retryAttemptedLogLevel="INFO" redeliveryDelay="250"
                              backOffMultiplier="2" useExponentialBackOff="true"/>
		</errorHandler>
        
		
		<route id="start-broker-flow-route" errorHandlerRef="defaultEH">
			<from uri="direct:start-broker-flow" />
			<log message="Broker Flow Start" />
			<to uri="bean:routerFlowManagerService?method=startBrokerFlow" />
		</route>
		
		<route id="execute-crud-operations-route" errorHandlerRef="dlc">
			<from uri="direct:execute-crud-operations" />
			<log message="execute-crud-operations-route" />
			
			<to uri="bean:routerFlowManagerService?method=executeCrudOperations" />
			<setHeader headerName="theBody"><simple>${body}</simple></setHeader>
			<wireTap uri="seda:get-scripts-and-nodereds"/>
			<setBody><simple>${in.header.theBody}</simple></setBody>
		</route>
		
		<route id="get-scripts-and-nodereds-route" errorHandlerRef="defaultEH">
			<from uri="seda:get-scripts-and-nodereds" />
			<log message="get-scripts-and-nodereds-route" />
			<to uri="bean:routerFlowManagerService?method=getScriptsAndNodereds" />
			<to uri="seda:split-aggregate-calls"/>
		</route>
		
		<route id="split-aggregate-calls-route" errorHandlerRef="defaultEH">
			<from uri="seda:split-aggregate-calls" />
				<log message="split-aggregate-calls-route" />
				<setHeader headerName="theBody"><simple>${body}</simple></setHeader>
					<choice>
						<when>
							<header>endpoints</header>
							<split parallelProcessing="true" streaming="true" strategyRef="resultsAggregationStrategy">
								<simple>${in.header.endpoints}</simple>
								<log message="Call ${header.CamelSplitIndex}" />
								<to uri="direct:advice-scripts-and-nodereds" />
							</split>
                        </when>
                        <otherwise>
                                <log message="NO Endpoints" />   
                        </otherwise>
                	</choice>
                	
				<setBody><simple>${in.header.theBody}</simple></setBody>
				<log message="Broker Flow END" />
		</route>
		
		<route id="advice-scripts-and-nodereds-route" errorHandlerRef="dlc">
			<from uri="direct:advice-scripts-and-nodereds" />
			<log message="advice-scripts-and-nodereds-route" />
			<to uri="bean:routerFlowManagerService?method=adviceScriptsAndNodereds" />
		</route>		

	</camelContext>
	
</beans>