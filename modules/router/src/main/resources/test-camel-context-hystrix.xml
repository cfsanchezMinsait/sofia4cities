<routes xmlns="http://camel.apache.org/schema/spring">

	<route id="node-red-proxy" errorHandlerRef="defaultEH">
		<from uri="direct:node-red-proxy" />
		<to uri="bean:routerServiceImpl?method=nodeRed" />
		<to uri="amqp:queue:incomingOrders" />
	</route>

	<route id="bar">
		<from uri="direct:bar" />
		<to uri="mock:bar" />
	</route>

	<route id="timerToInRoute">
		<from uri="timer:foo?period=5s" />
		<transform>
			<simple>Message at ${date:now:yyyy-MM-dd HH:mm:ss}</simple>
		</transform>
		<to uri="amqp:queue:incomingOrders" />
	</route>

	<route id="inToOutRoute">
		<from uri="amqp:queue:incomingOrders" />
		<log message="Routing message from inbox to outbox queue with data ${body}" />
		<to uri="mock:bar" />
	</route>

	<route id="rest-getPersonId" streamCache="true">

		<from uri="timer://foo?fixedRate=true&amp;period=25s" />
		<doTry>
			<log message="1. Fallback Before Hystrix" loggingLevel="ERROR" />
			<hystrix>
				<hystrixConfiguration circuitBreakerEnabled="true"
					circuitBreakerForceOpen="true"
					circuitBreakerRequestVolumeThreshold="20" fallbackEnabled="true"
					circuitBreakerErrorThresholdPercentage="20"
					circuitBreakerSleepWindowInMilliseconds="60000" />

				<to uri="direct:bar2" />
				<log message="2. Call Hystrix Service 1" loggingLevel="ERROR" />
				<onFallback>
					<log message="3. onFallback triggered" loggingLevel="ERROR" />
					<to uri="mock:bar" />
					<log message="4. do catch exception of Fallback" loggingLevel="ERROR" />
				</onFallback>
			</hystrix>
			<log message="5. afterOnFallback" loggingLevel="ERROR" />
			<doCatch>
				<exception>java.lang.Exception</exception>
				<log message="5. do catch exception of Fallback" loggingLevel="ERROR" />
			</doCatch>
			<doFinally>
				<log message="6. afterOnFallback in finally" loggingLevel="ERROR" />
			</doFinally>
		</doTry>
	</route>

</routes>
