#/**
# * Copyright Indra Sistemas, S.A.
# * 2013-2018 SPAIN
# * Licensed under the Apache License, Version 2.0 (the "License");
# * you may not use this file except in compliance with the License.
# * You may obtain a copy of the License at
# *      http://www.apache.org/licenses/LICENSE-2.0
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.
# */


## GENERAL
gen.search			= Search
gen.create			= Create
gen.description		= Description
gen.name			= Name
gen.owner			= Owner
gen.active			= Active
gen.public			= Public
gen.created			= Created at
gen.options			= Options
gen.view			= View it
gen.edit			= Edit
gen.filter			= Filter
gen.cancelBtn		= Cancel
gen.closeBtn		= Close
gen.editBtn			= Edit
gen.createBtn		= New
gen.deleteBtn		= Delete
gen.showBtn			= Show
gen.sepBtn			= Or
gen.resetBtn		= Reset
gen.confirmTitle	= Confirmation
gen.options			= Options
gen.columns			= Columns
gen.form.error		= You have some form errors. Please check below. 
gen.form.success	= Your form validation is successful!
gen.mode.insert		= Insert Mode
gen.mode.update		= Update Mode
gen.copyright		= Sofia4Cities Minsait © 2018 Indra Company

# app
name.sofia2			= Sofia4Cities
name.app			= Sofia4Cities Control Panel 
name.visualization	= VISUALIZATIONS
name.dashboards		= DASHBOARDS
name.ontologies		= ONTOLOGIES
name.clients		= DEVICES
name.gadgets		= GADGETS
name.home			= HOME
name.users			= USERS

head.lang			= Language
head.lang.es		= Spanish
head.lang.en		= English
head.logout			= Log out
foot.app			= Sofia4Cities Minsait © 2018 Indra Company 
foot.company		= Indra Company
foot.sourcecode		= Source Code
foot.legal			= Legal Terms and Conditions for use Sofia4Cities
foot.license		= Code licensed under Apache License 2.0
foot.close			= Close
# ----------------- SIMULATION --------
simulation.clients				 	= Clients
simulation.client				 	= Client
simulation.ontology 		 		= Ontology
simulation.template.list			= Simulation list
simulation.active				 	= Active
simulation.identification			= Identification
simulation.interval			 		= Time between inserts
simulation.interval.placeholder		= In seconds
simulation.integer.begin 			= Begin value
simulation.integer.end 				= End value
simulation.integer.fixed 			= Value
simulation.number.begin 			= Begin value
simulation.number.end 				= End value
simulation.number.precision 		= Decimal precision
simulation.number.fixed 			= Value
simulation.string.fixed 			= String value
simulation.string.random 			= Random String from list
simulation.string.list 				= String list, each term separated by ','
simulation.cosine.base 				= Base
simulation.cosine.multiplier		= Multiplier
simulation.cosine.steps 			= Number of steps
simulation.sine.base 				= Base
simulation.sine.multiplier 			= Multiplier
simulation.sine.steps				= Number of steps
simulation.date.from 				= From
simulation.date.to 					= To
simulation.date.from.placeholder 	= Pick date
simulation.date.to.placeholder	 	= Pick date
simulation.select.tokens 			= Tokens
simulation.select.ontologies 		= Ontologies
simulation.clientplatform 			= Devices
simulation.fields 					= Ontology Properties
simulation.choose 					= Choose function
simulation.breadcrumb.create 		= Create Simulation
simulation.breadcrumb.prev 			= Simulations
simulation.template.create 			= New Simulation

# ----------------- QUERYTOOL ---------
querytool.querytype.notselected 	= Please select queryType Native or SQL
querytool.ontology.access.denied.json = You don't have permissions for this ontology
querytool.select.fields				= Select fields
querytool.select.all.fields			= All fields
# ----------------- TWITTER ---------
scheduledsearch.breadcrumb.prev		= Scheduled Search List
scheduledsearch.template.create		= Schedule Search
scheduledsearch.template.update		= Update Scheduled Search
scheduledsearch.breadcrumb.create	= New Scheduled Search
scheduledsearch.breadcrumb.update	= Update Scheduled Search
scheduledsearch.identification		= Identification
scheduledsearch.configuration		= Configuration 
scheduledsearch.topics				= Topics
scheduledsearch.topics.rules		= Indicate the topics separated by ","
scheduledsearch.from				= Start of the Search
scheduledsearch.to					= End of the Search
scheduledsearch.ontologies.target	= Target Ontologies
scheduledsearch.ontologies			= Ontologies
scheduledsearch.clientplatform		= Platform Client
scheduledsearch.token				= Token
scheduledsearch.identificator		= Identification
scheduledsearch.newontology			= New Ontology
scheduledsearch.del.confirm			= You are just about to delete this Twitter Listening �Do you want to continue?
scheduledsearch.template.list		= Scheduled Searchs List
scheduledsearch.user				= Owner
scheduledsearch.identificator		= Identification
scheduledsearch.delete.fail 		= Could not delete listening
scheduledsearch.delete.success		= Listening deleted
twitterlistening.validation.error	= Validation error in listening
scheduledsearch.template.list 		= Twitter Listenings list
scheduledsearch.user				= Owner
scheduledsearch.delete.confirm		= Do you want to delete this Listening?


# ----------------- USER -------------
user.id					= User Id
user.name				= User FullName
user.password			= Password
user.password.help		= The password must also contain a lowercase letter, an uppercase letter, a digit and must be between 7 and 20 characters long, and not contain the identification.
user.email				= eMail
user.rolTypeName		= Role
user.dateCreated		= created At
user.dateDeleted		= deleted At
user.active				= Active
user.active.help		= An Active user can log in,  when we delete a user it becomes innactive and has a Remove datestamp.
user.template.show		= Show User
user.template.list		= Manage User
user.template.create	= Create New User 
user.template.update	= Update User 
user.breadcrumb.show	= Show user
user.breadcrumb.create	= New user
user.breadcrumb.update	= Update user
user.breadcrumb.prev	= User List
user.search.description = User Search, click to toggle the search form and search by any of the fields.
user.valid.dateDeleted	= The invalidation date must be after the current date
user.delete.confirm		= Do you want to invalidate this user? Once you've done it, you won't be able to create a new user with the same identifier!
user.create.error		= Error creating user
user.create.error		= Could not create user
user.create.success		= User created
user.update.error		= Could not update user
user.update.success		= User updated
user.validation.error	= Validation error for user

# ----------------- ONTOLOGY ---------
ontology.id					= Ontology Id.
ontology.schema				= Ontology Schema
ontology.datamodel			= Ontology Template
ontology.datamodel.type		= Ontology Template Category
ontology.datamodel.error	= You have some form errors. Please Select at least one Datamodel below.
ontology.datamodel.selection= Please, fill name and description before select a datamodel template.
ontology.identification		= Identification
ontology.identification.help= Is an auto-generated internal identifier, yo don´t need to fill it.
ontology.name				= Name
ontology.metainf			= Meta-Information
ontology.metainf.help		= Ontology meta information, descriptive fields.
ontology.metainf.min		= Please fill at least 2 chars
ontology.description		= Description
ontology.description.min	= Please fill at least 5 chars
ontology.section.templates	= Ontology Templates
ontology.section.properties	= Additional Properties
ontology.section.schema		= Schema generator and JSON Instances
ontology.userId				= Owner
ontology.active				= Active
ontology.active.help		= An ontology must be active in order to perform operations on it, inactive is blocked.
ontology.public				= Public
ontology.public.help		= A public Ontology can be seen by other users and they can subscribe to it, private only remains for the owner.		
ontology.createdAt			= Created At
ontology.wizard				= Ontology Wizard
ontology.wizard.desc		= This option allows you to create an ontology specifying its attributes and types in a simple and guided way.
ontology.jsonSchema			= JSON-Schema Ontology
ontology.jsonSchema.desc	= This option allows you to create an ontology from a JSON template or XSD file.
ontology.csv				= CSV/EXCEL Ontology
ontology.csv.desc			= This option allows you to create an ontology from an Excel/CSV file.
ontology.json_xml			= JSON/XML Ontology
ontology.json_xml.desc		= This option allows you to create an ontology from a JSON or a XML file.
ontology.template.show		= Show ontology
ontology.template.list		= Manage ontologies
ontology.template.create	= Create New ontology 
ontology.template.update	= Update ontology 
ontology.rtdbclean			= Delete from RealTimeDB
ontology.rtdbtohdb			= Move from RealTimeDB to HistoricalDB
ontology.breadcrumb.show	= Show ontology
ontology.breadcrumb.create	= New ontology
ontology.breadcrumb.update	= Update ontology
ontology.breadcrumb.list	= Ontology List
ontology.search.description = Ontology Search, click to open/collapse the search form and search by any of the fields.
ontology.delete.confirm		= Do you want to invalidate this ontology? Once you've done it, you won't be able to create a new ontology with the same name!
ontology.authorizations		= Authorizations

# ----------------- CONFIGURATION ----
configurations.breadcrumb.prev	= Configurations list
configurations.type				= Configuration type
configurations.template.list	= Configurations list
configurations.json				= Configuration JSON
configurations.template.create	= Create New Configuration
configurations.breadcrumb.create= New Configuration
configurations.breadcrumb.update= Update Configuration
configuration.userid			= User Id
configurations.template.update	= Update Configuration
configurations.createdAt		= Creation Date
configurations.template.show	= Show Configuration
configurations.breadcrumb.show	= Show Configuration
configuration.id				= Identification
configuration.description		= Description
configuration.suffix 		    = Suffix
configuration.del.confirm		= You are just about to delete this configuration, do you want to continue?
configuration.validation.error	= Validation error in configuration

# ----------------- DATABASES ---------
database.breadcrumb.show	= Database Console for DBTR and BDH
database.breadcrumb.create	= New Query
database.breadcrumb.update	= Update Query
database.breadcrumb.list	= Queries
database.template.show		= SQL* Commander on DBTR and BDH
database.ontologies			= Select Ontology
database.ontologies.help	= Select one Generic or Group Ontology
database.generic			= Generic


# ----------------- GRAPH ---------
graph.table.item		= Name
graph.table.value		= Value
graph.table.properties	= Properties
graph.table.source		= Source
graph.table.show		= Show
graph.table.create		= New
graph.table.go			= Access
graph.source			= Source
graph.type				= Type
graph.hierarchy			= Hierarchy
graph.up-down			= Up-Down
graph.down-up			= Down-Up
graph.left-right		= Left-Right
graph.right-left		= Right-Left
graph.reload			= Reload
graph.description		= This graph represents some of the Sofia2 concepts that have been registered in the platform. If you place the mouse over the main nodes, a particular description will be displayed. When you click on a node, you will be able to see a table with relevant information about it and their particular links will be highlighted.If you also move the mouse by clicking, you can move the node as well as its links. If you want to move the entire position graph, simply click on any part of the graph that does not correspond to a node and move the mouse.
graph.universe			= My Environment
graph.information		= Information
graph.clustering		= Clustering


#Messages for the Tooltips
tooltip_ontologies=Ontologies are the data models within the platform. They are represented via a JSON-Schema (JSON for the instances) and transparently to the programmer can be stored in different types of storage.
tooltip_clients= Device represents each of the clients of the platform, typically they are devices sending information to the platform, but they can be devices subscribed to other information, mobile or web applications visualizing information stored on the platform or complete systems. A Device handles 1 or more ontologies.
tooltip_rules=A Rule represents the execution of a more or less complex logic, the Rules can be executed before the arrival of an Instance or with a temporal planning (CRON). The Rules can be of type IF-THEN (Script Rules) or of type CEP (temporary relationship between several instances). The Rules can be created in different languages (R, Python, Groovy) through the Console itself....
tooltip_visualization=The Visualization Tools allow me to exploit in a simple and graphic way the information stored in the Platform (Ontologies). I can create unit display elements (Gadgets), join them in a web page (Dashboard).
tooltip_tools=Support tools for development, operation, ...
tooltip_administration=Platform administration tools: user management, platform monitoring, operations management, security.
tooltip_apiManager=The API Manager allows you to publish APIS on all the information managed by the Platform, all in a visual way. 
#tooltip_socialMedia = The Social Media analysis tools provide access to information of different social networks (Twitter, Facebook, Instagram) and APIs (Google Analytics, Brandwatch). This module supports streaming and scheduled loads, and also exporting the data to Ontologies.
#tooltip_analytics=The Platform has multiple analytics capabilities, like the DataFlow engine (allows you to configure sources, destinations and transformations to manipulate data) and the Sofia2 Notebooks (they allow data scientists to apply data transforms and Machine Learning alrgorithms).
#tooltip_importExport=This menu allows you to import or export Sofia2 configurations (users, ontologies, etc).


query.limit=The query output has been limited to {0} records
query.limitada=The query output has been limited

market_place_expira_sesion=Your session will expire in 5 minutes. Please, save your data, you will be able to edit it later.

market_place_habilitar_proveedor=Enable
market_place_deshabilitar_proveedor=Disable
market_place_eliminar_proveedor=Remove
market_place_habilitar_asset=Enable
market_place_deshabilitar_asset=Disable
market_place_eliminar_asset=Remove

market_place_singup_asset_operacion_error = There was an error performing the operation on the asset.
market_place_singup_asset_delete = The asset has been deleted successfully.
market_place_singup_asset_habilitar = The asset has been successfully enabled.
market_place_singup_asset_deshabilitar = The asset has been successfully disabled.
market_place_list_proveedor_error = There was an error performing the operation on the provider.
market_place_list_proveedor_delete = The asset has been deleted successfully.
market_place_list_proveedor_habilitar = The provider has been successfully enabled.
market_place_list_proveedor_deshabilitar = The provider has been successfully disabled.

market_place_list_mensaje_confirmacion_delete= You are about to delete this element, this action cannot be reversed. Are you sure you want to continue?

market_place_list_mensaje_proveedor_deshabilitado =  Your account has been disabled, if you want to enable it again, contact us at

##WIZARD
menu_category_WIZARMASTER_label=WIZARD
menu_item_WIZARMASTER_activos=WIZARD
tooltip_wizard=Wizards to create an IoT application in a guided way
menu_item_WIZARD_label=WIZARD
menu_category_WIZARD_label=WIZARD

##show.html
wizard_breadcrumb=WIZARD
wizard_show_titulo_proyecto=Let's start! Create a Project/Space
wizard_show_desc_proyecto=A Space (Sofia2 Project) represents a virtual collaborative environment where users can create their applications, for example by creating ThinKP, modeling their entities, applying algorithms or creating visualizations.
wizard_show_crear_proyecto=Create Project
wizard_show_utilizar_proyecto=Use Existing One

wizard_show_titulo_modela=Model information
wizard_show_desc_modela=A Sofia2 Ontology represents the Domain Model that manages a ThinKP (device). Ontologies are represented in JSON format and can represent a basic model (like a table) or a complex model with relationships (like a set of related tables). Entities can be created in several ways: visually in a UML class diagram, through a JSON or XML schema, field by field or from a CSV/Excel file.
wizard_show_usa_modela=Using an Ontology
wizard_show_carga_modela=Upload an Excel file
wizard_show_crea_modela=Create an Ontology

wizard_show_titulo_thing=Model your device (ThinKP)
wizard_show_desc_thing=A Device (called Knowledge Processor or ThinKP in Sofia2 terminology) represents an element that interacts with the Platform, either publishing or consuming information. A ThinKP can represent from a simple device (like an Arduino board or an iBeacon) to a Gateway (like a Raspberry Pi) to a Business System (like a Java backend). ThinKPs interact with one or more Ontologies.
wizard_show_crea_thing=Create ThinKP

wizard_show_titulo_simula=Simulate your device and test your app
wizard_show_desc_simula=The Instance Generator allows to send information of certain type (Ontology) to the platform simulating a data feed sent from a Device (ThinKP). With the Instance Generator, we can to test our application without having a physical device.
wizard_show_crea_simula=Create Instance Generator
wizard_show_lanza_simula=Run Instance Generator

wizard_show_titulo_visu=Represents data sent by your device
wizard_show_desc_visu=Visualization tools allow you to use the information stored in the Platform in a graphic and intuitive way. You can create single visualization elements (Gadgets), merge them into a web page (Dashboard) or even create complex SCADA synoptics representing the evolution of signals (ontology instances).
wizard_show_sino_visu=Create a Synoptic
wizard_show_dash_visu=Create a Dashboard
wizard_show_gadg_visu=Create a Gadget

wizard_show_titulo_conec=Connect your Device
wizard_show_desc_conec=Now we are going to create the ThinKP that will run on your device. We will use the Ontology (XXX) and the device (ThinKP)
wizard_show_ja_conec=Download Java ThinKP

wizard_show_titulo_api=Publish an API so others can consume the information generated by your Device
wizard_show_desc_api=The API Manager allows to publish APIS REST on all the information managed by the Platform, all in a personalized, secure and graphical way. APIS REST has been standardized as an access interface for mobile applications, external systems, and allows access to the entities of the platform without complications.
wizard_show_cre_api=Create API
wizard_show_pru_api=Test API

wizard_show_descargar=Download your ThinKP

wizard_show_mensaje_gadget=If you want to create a Dashboard you must create a Gadget first.
wizard_show_mensaje_ontologia=If you want to create a ThinKP you must create an Ontology first.
wizard_show_mensaje_kps=If you want to create a Gadget you need to create a ThinKP first.
wizard_show_mensaje_ontologia_user=If you want to create a ThinKP you need to have permissions on an existing Ontology.

##wizard CREATE proyectos
wizard_proyectos_create_Finalizar=Finish
wizard_proyectos_create_intro=Introduction
wizard_proyectos_create_intro1=Projects allow you to organize the work that is done in the platform and to have a unified vision of the concepts that are handled. Besides, they also allow you to collaborate with the different project members.
wizard_proyectos_create_intro2=This wizard allows you to create a project. You can also access it by clicking the menu entry <b>Projects -> My Projects -> Create</b><br> <br>.
wizard_proyectos_create_Dat=Data
wizard_proyectos_create_datos=We need the following data to identify the project:
wizard_proyectos_create_proyecto1=<b>Basic IoT:</b> projects that only need access to the basic features of the Platform.
wizard_proyectos_create_proyecto2=<b>General IoT:</b> projects that need the whole functionality supported by the Platform.
wizard_proyectos_create_proyecto3=<b>Social Media:</b> projects focused on analyzing Social Networks data.
wizard_proyectos_create_proyecto4=<b>Big Data Analytics:</b> projects focused on analyzing and exploiting data, modelling, reporting, ...
wizard_proyectos_create_miembros=Select project members

wizard_proyectos_create_ontologias_breadcrumb=Ontologies
wizard_proyectos_create_ontologias_desc=Select the ontologies associated to the project and choose the type of access that project members will have:
wizard_proyectos_create_asociar_informes=Select the reports associated to the project.
wizard_proyectos_create_asociar_kps=Select the ThinKP instances associated to the project.

wizard_proyectos_create_asociar_kps_bre=ThinKP instances
wizard_proyectos_create_asociar_gadgets=Select the gadgets associated to the projects.
wizard_proyectos_create_asociar_dash=Select the dashboards associated to the project.
wizard_proyectos_create_asociar_Note=Select the notebooks associated to the project.
wizard_proyectos_create_asociar_Pipe=Select the pipelines associated to the project.
wizard_proyectos_create_desc_fin=To finish and create the project, click the <b>New</b> button. If you want to go back and avoid saving the project, click <b>Cancel</b>.
wizard_proyectos_create_motor_flujos=Flow Engine
wizard_proyectos_create_motor_flujos_des=To finish, select a domain and the identification to create the flow engine.
wizard_proyectos_create_roles_virtuales=Virtual Roles
wizard_proyectos_create_roles_descr=Select the <b>roles</b> you want to associate with the project.
wizard_proyectos_pipelines=Pipelines
wizard_proyectos_Notebooks=Notebooks
wizard_proyectos_Dashboards=Dashboards
wizard_proyectos_Gadgets=Gadgets
wizard_proyectos_Informes=Reports

##wizard CREATE ontologia paso a paso

wizard_proyectos_on_paso_intro=A Sofia2 Ontology is created using a JSON schema. It defines the properties, datatypes and restrictions of the entities that the ThinKPs exchange with the Platform.<br>If you're not familiar with JSON schemas, you can use this wizard. It allows you to create an ontology with the main data types supported by the JSON Schema specification.<br> <br>You can also access it by clicking the menu <b>Ontologies</b> -> <b>New Ontology Wizard</b>.
wizard_proyectos_on_paso_Dat=Data
wizard_proyectos_on_paso_datos=In order to create your ontology, we need the following data:<br> <br>Check <b>Active</b> to activate it and to make it accessible, and <b>Public</b> to allow public access to the ontology.<br> <br>You can also add <b>Meta-Inf</b> tags used at the Open Data portal searches.
wizard_proyectos_on_paso_bdtr1=Configure the time period in which the data will remain at the real-time database (RTDB) before being migrated to the Historic Database (HDB).
wizard_proyectos_on_paso_bdtr2=You can create a parent-child ontology hierarchy on a group of ontologies that share a common structure, defined in the parent ontology. You can choose between:<br> <br><b>Parent Ontologies.</b> They are abstract (non-instantiable) ontologies that serve as a "Template" to child ontologies. <b>Child ontologies.</b>They are ontologies that extend a parent ontology and have an schema of their own. They have specific configuration (security, historic database migration, etc). <b>General type ontologies.</b> The ontologies you already are familiar with.

wizard_proyectos_on_paso_bdtr3=The available datatypes to create properties from the Wizard are the ones from the JSON schema specification (string, number, integer, boolean, array), along with the timestamp and geometry types. The last two ones allow the Platform to fully exploit the capabilities of the real-time database. Once all the attributes have been defined, they will appear in the properties table. If you no longer need one of them, it can be deleted.<br> <br>After clicking <b>Generate Ontology</b>, you will see the result in the following step.
wizard_proyectos_on_paso_aniadir_prop=Add Properties
wizard_proyectos_on_paso_plan=The generated schema is editable. Before finishing the ontology creation, you can add any additional fields you need.
wizard_proyectos_on_paso_instancia_tit=Generate Instance
wizard_proyectos_on_paso_instancia_Des=You can click this button to generate an ontology instance
wizard_proyectos_on_paso_Finalizar=Finish
wizard_proyectos_on_paso_desc_fin=To create the ontology, click the <b>New</b> button. If you changed your mind and don't want to save the changes, click <b>Cancel</b>.

##wizard CREATE KPS
wizard_proyectos_create_kp_introduccion=Introduction
wizard_proyectos_create_kp_datos=Data
wizard_proyectos_create_kp_config_ontologia=Configuration Ontology
wizard_proyectos_create_kp_meta_info=Meta-Information
wizard_proyectos_create_kp_finalizar=Finish
wizard_proyectos_create_kp_intro=This wizard allows you to create a <b>ThinKP</b>. You can access it by clicking the menu <b>SOFIA2 THINKPS</b> -> <b>My ThinKPs</b> -> <b>New ThinKP</b>.
wizard_proyectos_create_kp_Dat=In order to create your <b>ThinKP</b>, we need the following data:
wizard_proyectos_create_kp_ontologia=Select the ontologies that your <b>ThinKP</b> will be able to access.
wizard_proyectos_create_kp_fin=To create the <b>ThinKP</b>, click the <b>New</b> button. If you changed your mind and don't want to save the changes, click <b>Cancel</b>.
wizard_proyectos_create_kp_meta=You can add meta information to the <b>ThinKP</b>.
wizard_proyectos_create_kp_error=The name and value fields are required.

##wizard CREATE SIMULADOR
wizard_proyectos_create_simulador_identif=ID
wizard_proyectos_create_simulador_generador_instancias=Instance Generator
wizard_proyectos_create_simulador_ontologia=Ontology
wizard_proyectos_create_simulador_json=JSON Instance
wizard_proyectos_create_simulador_introduccion=This wizard allows you to create a <b>Instance Generator</b>. You can also access it by clicking the menu <b>ONTOLOGIES</b> -> <b>Real-Time Instance Simulator</b>
wizard_proyectos_create_simulador_indent_desc=In order to create your <b>Instance Generator</b>, we need the following data:
wizard_proyectos_create_simulador_generador_desc=Fill in the configuration of the <b>Instance Generator</b>.
wizard_proyectos_create_simulador_ontologia_desc=Select the ontology that will be associated to the <b>Instance Generator</b>.
wizard_proyectos_create_simulador_instacia_json=You can add a custom <b>JSON</b> ontology instance to the simulation.
wizard_proyectos_create_simulador_fin_des=To create the instance generator, click the <b>Create Instance Generator</b>. If you changed your mind and don't want to save the changes, click <b>Cancel</b>.

##wizard LANZAR SIMULADOR
wizard_proyectos_create_lanzar_simulacion_cancelar=Cancel
wizard_proyectos_create_lanzar_simulacion_introduccion=This wizard allows you to launch an <b>Instance Generator</b>.
wizard_proyectos_create_lanzar_simu_fin=Projects can also launch <b>Instance Generators</b>, create instance generators from the generator types or even create a whole new simulation.
wizard_proyectos_create_lanzar_simulacion_titulo=Process
wizard_proyectos_create_lanzar_simulacion_titulo_desc=To start an <b>Instance Generator</b>, click the <b>Start</b> button. To stop it, click the <b>Stop</b> button.
wizard_proyectos_create_lanzar_simulacion_lanzado=The simulation has been launched. If you want to stop it, click <b>Stop</b> or close this tab.

##wizard CREATE API
wizard_proyectos_create_apimanager_intro=This wizard allows you to create an <b>API</b>.
wizard_proyectos_create_apimanager_fin=To create the <b>API</b>, click the <b>New</b> button. If you changed your mind and don't want to save the changes, click <b>Cancel</b>.
wizard_proyectos_create_apimanager_operaciones=Depending on the <b>Ontology</b> you've chosen, you can add <b>Authentication</b> and <b>Operations</b> to the <b>API</b>. They will also be loaded automatically, depending on the selected <b>Ontology</b>.
wizard_proyectos_create_apimanager_metainfo=You can configure <b>Authentication</b> by clicking the <b>Add Authentication</b> button.
wizard_proyectos_create_apimanager_datos=To create the <b>API</b>, we need the following data

##wizard PROBAR API
wizard_proyectos_create_probar_api_intro=This wizard allows you to test your <b>API</b>. You can also do this by clicking the menu <b>API Manager</b> -> <b>My API Subscription</b>.<br> <br>You can subscribe to any API that is in the published or development states.
wizard_proyectos_create_probar_api_list=APIs List
wizard_proyectos_create_probar_api_list_desc=The <b>APIs</b> allow you to perform several operations in real time. If you want to test an <b>API</b> click on the <b>TEST & DOC</b> button.
wizard_proyectos_create_probar_api_finalizar=If you want to exit the <b>API</b> test, press the <b>Cancel</b> button.
wizard_proyectos_create_probar_introd_api=General data of an <b>API</b> with all its detailed information.
wizard_proyectos_create_probar_introd_certifi=We show all the <b>CERTIFICATION</b> data along with the methods <b>methods</b>. You can select them to view extra information.
wizard_proyectos_create_probar_post=We'll send a <b>POST</b> request. The response data will appear below.
wizard_proyectos_create_probar_get=We'll send a <b>GET</b> request. The response data will appear below.
wizard_proyectos_create_probar_put=We'll send a <b>POST</b> request. The response data will appear below.
wizard_proyectos_create_probar_delete=If you want to send a <b>DELETE</b> request, click the <b>submit</b> button.
wizard_proyectos_create_probar_custom=The data of a <b>CUSTOM</b> operation appears below..

##Internacionalizacion botones query_steps
steps_button_current=Current step:
steps_button_pagination=Pagination
steps_button_finish=Final
steps_button_next=Next
steps_button_previous=Previous
steps_button_loading=Loading...

##wizard crear ontologÃ­a desde excel
wizard_excel_esquema=Schema
wizard_excel_intro_des=Sofia2 allows us to create ontologies from Excel and CSV files. You can also do this by clicking the menu <b>ONTOLOGIES<b> -> <b>Create Ontology from Excel/CSV</b>
wizard_excel_datos_des=You can either create a new ontology or use an existing one.
wizard_excel_datos_des_nueva=If you create a new ontology, you must specify the name, description, public and active fields.<br> <br>You can also set the period in which the data will remain at the real-time database (RTDB) before being migrated to the Historic Database (HDB).
wizard_excel_datos_des_aniadir=Choose an existing ontology.
wizard_excel_datos_modcarg_des=You must select the file to be loaded. If the IDs are contained in the first column or if it's compatible with Evidens, you must choose the decimal separator.<br> <br> Additionally, if you're loading a CSV file, you must specify the encoding and the field separator.
wizard_excel_datos_atrib1=Now, you have to map the attributes of the file with the ones of the ontology. To do it, click the pencil icon and assign a column to each identifier. You can also edit the format of the date fields.
wizard_excel_datos_atrib2=Now, we'll set the attributes of the ontology.
wizard_excel_evidents=Evidens Compatible
wizard_excel_evidents_t_requerido=Required
wizard_excel_evidents_cancelar=Press Cancel to exit.
wizard_excel_evidents_b_cancelar=Cancel
wizard_excel_evidents_b_cargar=Upload Data
wizard_excel_desc_fin=To load the data of the Excel/CSV file, click <b>Upload Data</b>. If you changed your mind and don't want to save the changes, click <b>Cancel</b>.

##wizard descargar thinkp

wizard_descarga_breadcrumb=DOWNLOAD THINKP
wizard_descarga_tu_kp_desc=You can download a ThinKP in the language of your choice. You will only have to choose the Sofia2 connection data.<br> <br><b>ThinKP</b>, your <b>Token</b>, one of your and <b>Ontology</b> with which we will work.
wizard_descarga_nombre_kp=ThinKP
wizard_descarga_Ontologia=Ontology
wizard_descargas_Token=Token
wizard_descarga_Instancia=Instance
wizard_descarga_Lenguaje=Language
wizard_descarga_Javascript=JavaScript
wizard_descarga_Java=Java MAVEN
wizard_descarga_Boton_descarga=Download
wizard_descarga_error_todos_obligatorios=All fields are required.

##wizard ayuda gadget
wizard_ayuda_gadget_ayuda = Help
wizard_ayuda_gadget_desc = Select the type of gadget you want to create, there are five groups:
wizard_ayuda_gadget_wizard=<b>WIZARD</b>
wizard_ayuda_gadget_des_mapas = <li> <b>Maps:</b> This Gadget allows us to represent information elements and geolocalizarlos on a map.</li> <li> <b>HeatMap:</b> Heat maps, so present information in the most graphic way possible and useful form of representation used as a heat graphy, establishing a hierarchy of two poles; that is, on the one hand, is done through the use of (usually red, orange and yellow) warm colors to show areas of action of clicks or interest of focus, against a range of cool colors (blue, green) . semantizan areas that do not receive attention by the user.</li> <li> <b>image Heatmap:</b> can we create a heatmap on the image you choose, as could be the plans of a building, capture a screen, etc.</li><li><b>BorderMap:</b>We can create a map with the regions where the values assigned to that region are represented and display a scale of values with custom colors.</li>
wizard_ayuda_gadget_basico = <b>BASIC</b>
wizard_ayuda_gadget_des_basico = <li> <b>Area:</b> An area chart displays a series as a set of points connected by a line, and the entire area filled below the line.</li> <li> <b>Simple value:</b> It shows the value of a data in real time.</li> <li> <b>Gauge.</b> graphics gauge, also called graphics speedometer or graphics clock, They use needles to show information as a reading on a clock face. The value of each needle is easily read within the range of colored data or chart axis. This type of chart is used frequently in reports of executive control panel to display key performance indicators.</li> <li> <b>Table:</b> allows us to display information of ontologies in a table.</li> <li> <b>Column:</b> A bar chart also known as bar chart or column chart, it is a way to graphically represent data or a set of values, and consists of rectangular bars proportional to the values â€‹â€‹represented lengths. Bar charts are used to compare two or more values â€‹â€‹</li> <li> <b>Pie :</b> A pie chart also called "pie chart", "pie chart" is a statistical resource which is used to represent percentages and proportions.</li> <li> <b>bubbles:</b> you can use a bubble chart instead of a scatter plot if the data contains three sets of data containing a set values. The values â€‹â€‹of the third set of data determines the sizes of the bubbles. Bubble charts how often are used to present financial data </li> <li> <b>Carousel:</b> Display a series of images from the ontology where they are stored.</li> <li> <b> Mini Gadget:</b> We can display a set of minigrÃ¡ficas grouped in a row.</li>.
wizard_ayuda_gadget_mapas = <b>MAP</b>
wizard_ayuda_gadget_des_mapas=<li><b>Maps:</b>This gadget allows us to plot element data in a map.</li><li><b>HeatMap:</b>Heatmaps use a termographic representation and establish a two-pole hierarchy. dos polos; es decir, por una parte, se hace a través del empleo de colores cálidos (generalmente rojo, naranja y amarillo) para mostrar las zonas de acción de clics o interés de foco, frente a una gama de colores fríos (azul, verde) que semantizan las zonas que no reciben atención por parte del usuario.</li><li><b>Imagen Heatmap:</b>Podremos crear un heatmap sobre la imagen que elijamos, como podría ser los planos de un edificio, la captura de una pantalla, etc.</li><li><b>BorderMap:</b>Podremos crear un mapa con las regiones donde se representan los valores asignados a esa región y mostrar una escala de valores con colores personalizados.</li>
wizard_ayuda_gadget_social = <b>SOCIAL</b>
wizard_ayuda_gadget_des_social = <li> <b>HTML External:</b> allows us to include in our dashboard content dela URL to introduce, such as an image, another web page, etc.</li> <li> <b>Cloud words:</b> or tag cloud is a visual representation of the words that make up a text, where the size is larger for words that appear more frequently. or tag cloud is a visual representation of the words that make up a text, where the size is larger for words that appear more frequently.</li>
wizard_ayuda_gadget_avanzado = <b>ADVANCED</b>
wizard_ayuda_gadget_des_avanzado = <li> <b>HTML 5:</b> allows us to include HTML 5 code directly into our dashboard.</li> <li> <b>R Shiny:</b> is based on the powerful analytical language R, through the framework of Shiny.Shiny you are able to build web applications through R code executed on a server. Allows scripts very easily via R, create visualizations HTML5 with JavaScript libraries very powerful, as D3, Googlecharts maps Leaflet. Also, as a natural ability to R, you can import libraries available in the repository of CRAN to allow to deep analytics on the data.</li>
##area
wizard_ayuda_gadget_desc_area = Steps to create a <b>Gadget Area:</b>
wizard_ayuda_gadget_area = <b>GADGETS AREA</b>
wizard_ayuda_gadget_area_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_des_area_ini = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_area_directo = <b>DATA LIVE</b>
wizard_ayuda_gadget_des_area_directo = <li> This will show us the real-time data </li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graph.</li> <li> <b>Size:</b> each series we add will be a line in the chart which will give a name for each series identificarla.Para select an ontology of which we get the data, we also have to select two attributes one for the X axis and one for the Y axis.</li> <li> We will press add to create the series after this select a token and our gadget will be displayed at the bottom of the screen.<br> <br>Finally will press <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_area_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_des_area_query = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or <b>Historica (BDH) .</b></li><li><b>maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graphic.</li><li><b>We will obtain data every x seconds.</b> will be the time in seconds it will take to update the data </â€‹â€‹li><li><b>Browse:</b><ul><li><b>ontology:</b> will select the ontology on which will make the query.</li><li><b>Browse:</b> will write the query in  or Native format (only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following notation: $ { "NombreLabel", " format "}, may be the format date, datetime, number or string.</li><li> We have the possibility to use the Wizar to generate query. After creating the query will press add and add the measures or series.</li> </ul></li><li> We will press add to create the series, after this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_area_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_area_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b> <br> <br> You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
##valor simple
wizard_ayuda_gadget_desc_valorsimple = Steps to create a <b>Simple Gadget Value:</b>
wizard_ayuda_gadget_valorsimple_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_valorsimple_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_valorsimple_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_valorsimple_direc_des = <li> This will show us the real-time data </li> <li> <b>Measures:</b> will add a data that identify a nombre.Seleccionaremos <b>Ontology</b> from which get the data, we also have to select the value to be an attribute of the ontology.</li> <li> <b>URL icon:</b> here you can specify the url of an image that will appear on the bottom of the gadget .</li> <li> we also give the gadget a predefined color selecionandolo Style.<br> <br>will select a token and we will show the gadget at the bottom of the screen.<br> <br>Finally, click <b>Create </b> to create the new gadget.</li>
wizard_ayuda_gadget_valorsimple_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_valorsimple_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or <b>Historica (BDH).</b></li><li>	<b>We will obtain data every x seconds:</b> is the time in seconds it will take to update the data.</li><li>	<b>Browse:</b><ul><li><b>ontology:</b> will select the ontology on which we will query.</li><li><b>Browse:</b> will write the query in  or Native format (only if we consult on RTDB) We can parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li><li> We have the possibility to use the Wizar to generate query. <br> <br> After creating the query will press add and add the measure or series.</li></ul></li><li><b>Size:</b> will add a data that identify with a name. We will select a <b>Ontology</b> from which we get the data, we also have to select the value to be an attribute of the ontology.</li><li><b>URL icon:</b> here we can indicate the url of an image that will appear on the bottom of the gadget.<br> <br>we can also give the gadget a predefined color selecionandolo Style.</li><li> we will select a token and we will show the gadget at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_valorsimple_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_valorsimple_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b><br> <br>You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
##gauge
wizard_ayuda_gadget_desc_gauge = Steps to create a <b>Gadget Gauge:</b>
wizard_ayuda_gadget_gauge_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_gauge_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_gauge_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_gauge_direc_des = <li> This will show us the real-time data </li> <li> <b>Measures:</b> will give a name to identify, select <b>Ontology</b> from which we get the data also have to select the value and show the minimum and maximum value of the data range.</li> <li> We will press add to create the chart, after that select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget .</li>
wizard_ayuda_gadget_gauge_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_gauge_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>.</li> <li> <b>We will obtain data every x seconds:</b> is the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which we will query.</li> <li> <b>Browse:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) we can parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li> <li> we have the possibility to use <b>Wizar</b> to generate query.<br> <br>After creating the query will press add and add the measures or series.</li> </ul></li> <li> <b>Measures:</b> Select show the value and the minimum value and maximum data range.</li> <li> We will press add to create the <b>Image</b>, after that select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_gauge_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_gauge_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b><br> <br>You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
##tabla
wizard_ayuda_gadget_desc_tabla = Steps to create a <b>Gadget Table:</b>
wizard_ayuda_gadget_tabla_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_tabla_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_tabla_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_tabla_direc_des = <li> This will show us the real-time data.</li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graph.</li> <li> <b>Size:</b> every step we add will be a column in the table will give a name to identify.<br> <br>for each column will select an ontology of which we get the data, we also have to select. the attribute to show.<br> <br>will press add to create the <b>table</b>, after that select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_tabla_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_tabla_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>. <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the table.</li> <li> <b>We will obtain data every x seconds.</b> is the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which we will query.</li> <li> <b>Question:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following notation: $ { "NombreLabel "," format "}, may be the format date, datetime, number or string.</li> <li> We have the possibility to use the <b>Wizar</b> to generate query.<br> <br>After creating the query will press add and add the measures or series.</li> </ul></li> <li> <b>Measures:</b> Every step we add will be a column in the table we will give a name to identify it. For each series select an attribute to display in each column and can you put a name to the column.</li> <li> We will press add to create the <b>table</b>, after that select a token and will show our gadge at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_tabla_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_tabla_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b> <br> <br>You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
##columna
wizard_ayuda_gadget_desc_columna = Steps to create a <b>Gadget Column:</b>
wizard_ayuda_gadget_columna_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_columna_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_columna_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_columna_direc_des = <li> This will show us the real-time data.</li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graph.</li> <li> <b>Size:</b> each series we add will be a bar chart which will give a name to identify.<br> <br>for each series select an ontology of the data that we get, too. two attributes have to select one for the X axis and one for the Y axis.<br> <br>will press add to create the <b>series</b>, after that select a token and our gadge is displayed at the bottom of the screen .<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_columna_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_columna_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>.</li> <li> <b>maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graphic.</li> <li> <b>We will obtain data every x seconds.</b> will be the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which will make the query.</li> <li> <b>Browse:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li> <li> We have the possibility to use the <b>Wizar</b> to generate query.<br> <br>After creating the query will press add and add the measures or series.</li> </ul></li> <li> <b>Measures:</b> Each series we add will be a color bar in the chart which will give a name to identify it. For each series select an ontology of which we get the data, we also have to select two attributes one for the X axis and one for the Y axis.</li> <li> We will press add to create the <b>series</b> after this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_columna_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_columna_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b><br> <br>You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
wizard_ayuda_gadget_columna_eje = <b>EXCHANGE SHAFT</b>
wizard_ayuda_gadget_columna_eje_des = <li> To set gadgets like detail and create interactive gadgets with master tables, you need to set the <b>"Axis Exchange"</b> to a field of ontology, which allows two behaviors: <ul> <li> Filtering and scanning a subcategory.</li> <li> Filtering and maintenance of the category, in the case of using the same axis exchange X axis.</li> </ul> <li> the combination of both and several details of the master allowed.</li>
##pie
wizard_ayuda_gadget_desc_pie = Steps to create a <b>Gadget Pie:</b>
wizard_ayuda_gadget_pie_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_pie_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_pie_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_pie_direc_des = <li> This will show us the real-time data.</li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graph.</li> <li> <b>Measures:</b> we will select a Ontology obtain data which also have to select two attributes for each category and one for the value added mostrarÃ¡.Pulsaremos to assign data to be displayed after this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_pie_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_pie_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>.</li> <li> <b>maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graphic.</li> <li> <b>We will obtain data every x seconds.</b> will be the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which will make the query.</li> <li> <b>Browse:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li> <li> We have the possibility to use the <b>Wizar</b> to generate query.<br> <br>After creating the query will press add and add the measures or series.</li> </ul></li> <li> <b>Measures:</b> We will select two attributes and one for the category one for the value to be displayed.</li> <li> We will press add to assign data to be displayed after this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_pie_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_pie_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b><br> <br>You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
wizard_ayuda_gadget_pie_eje = <b>EXCHANGE SHAFT</b>
wizard_ayuda_gadget_pie_eje_des = <li> To set gadgets like detail and create interactive gadgets with master tables, you need to set the <b>"Axis Exchange"</b> to a field of ontology, which allows two behaviors: <ul> <li> Filtering and scanning a subcategory.</li> <li> Filtering and maintenance of the category, in the case of using the same axis of exchange that category.</li> </ul> <li> the combination of both and several details of the master.</li> is allowed.
##burbujas
wizard_ayuda_gadget_desc_burbuja = Steps to create a <b>Gadget Bubbles:</b>
wizard_ayuda_gadget_burbuja_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_burbuja_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_burbuja_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_burbuja_direc_des = <li> This will show us the real-time data.</li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹tmeasuresboth in the graph.</li> <li> <b>Measures:</b> Each series we add will be a color chart points that will give a name to identify it. For each series select an ontology of which we get the data, we also have to select three attributes one for the X axis, another for the Y axis and a third that will be the size of the points.</li> <li> We will press add to create the series after this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click Create to create the new gadget.</li>
wizard_ayuda_gadget_burbuja_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_burbuja_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>.</li> <li> <b>maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graphic.</li> <li> <b>We will obtain data every x seconds.</b> will be the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which will make the query.</li> <li> <b>Browse:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li> <li> We have the possibility to use the <b>Wizar</b> to generate query.<br> <br>After creating the query will press add and add the measures or series.</li> </ul></li> <li> <b>Measures:</b> Each series we add will be a color bar in the chart which will give a name to identify it. For each series select an ontology of which we get the data, we also have to select two attributes one for the X axis and one for the Y axis.</li> <li> We will press add to create the <b>series</b> after this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_burbuja_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_burbuja_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b><br> <br> <br> You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
##carousel
wizard_ayuda_gadget_desc_carousel = Steps to create a <b>Gadget Carousel:</b>
wizard_ayuda_gadget_carousel_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_carousel_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_carousel_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_carousel_direc_des = <li> This will show us the real-time data.</li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graph in this case would the maximum of images to be viewed simultaneously.</li> <li> <b>Measures:</b>we will select ontology parameters where we have stored the imagenens for display on the carousel.</li> <li> we will press. add to set the data, after that select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click Create to create the new gadget.</li>
wizard_ayuda_gadget_carousel_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_carousel_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>.</li> <li> <b>maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graphic.</li> <li> <b>We will obtain data every x seconds.</b> will be the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which will make the query.</li> <li> <b>Browse:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li> <li> We have the possibility to use the <b>Wizar</b> to generate query.<br> <br>After creating the query will press add and add the measures or series.</li> </ul></li> <li> <b>Measures:</b> We will select two attributes and one for the category one for the value to be displayed.</li> <li> We will press add to set the data and access the images, after that select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_carousel_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_carousel_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b><br> <br>You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
##mini gadget
wizard_ayuda_gadget_desc_mini = Steps to create a <b>Gadget Mini Gadget:</b>
wizard_ayuda_gadget_mini_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_mini_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_mini_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_mini_direc_des = <li> This will show us the real-time data.</li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graph.</li> <li> <b>Measures:</b> we will select a mini Ontology for every gadget that we get the data, we also have to select two attributes that will get the xeyo category and value axes. We can assign an icon to highlight information. We can create up to four mini gadgets.</li> <li> We will press add to assign data to be displayed after this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click Create to create the new gadget.</li>
wizard_ayuda_gadget_mini_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_mini_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>.</li> <li> <b>maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graphic.</li> <li> <b>We will obtain data every x seconds:</b> will be the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which will make the query.</li> <li> <b>Browse:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li> <li> We have the possibility to use the <b>Wizar</b> to generate query.<br> <br>After creating the query will press add and add the measures or series.</li> </ul></li> <li> <b>Measures:</b> will select a Ontology for each mini gadget that get the data, we also have to select two attributes that will get the xeyo axes valor.Podemos category and assign an icon to highlight the informaciÃ³n.Podremos create up to four mini gadgets.</li> <li> After this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_mini_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_mini_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b><br> <br>You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li> <li> <b>Type mini Gadgets</b> <ul> <li> <b>bar:</b> baras graph, we can fill one or two values â€‹â€‹</li> <li> <b>bar stacked:</b> stacked bar chart, fill in the two values â€‹â€‹</li> <li> <b>line:</b> line graph, we can fill one or two values â€‹â€‹</li> <li> <b>tristate:</b> graphic three negative, positive and 0 states, will fill the first value.</li> <li> <b>discrete:</b> graph of discrete values, fill in the first value.</li> <li> <b>pie:</b> pie chart, fill in the first value.</li> </ul></li>
##map
wizard_ayuda_gadget_desc_map = Steps to create a <b>Gadget Maps:</b>
wizard_ayuda_gadget_map_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_map_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_map_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_map_direc_des = <li> This will display the data in real time on the map.</li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both on the map.</li> <ul> <li> <b>Measures:</b> <li> select the ontology.</li> <li> In the Field will an attribute of coordinates such an example would be: <b>Location coordinates:</b> then transformation would put something like this: <b>{coordinates: $ 0, type: 'Point'}.</b>.</li> <li> we can define popups icons, this will will in html format <b>html in Popup Icon</b> this could be an example: <b><p> '+ $ [Name] +' </p><p> Sales Day: '+ $ [SaleDay] +' </p><p> Sales Week: '+ $ [Weekly Sale] +' </p><p> Sales Month: '+ $ [Sale] +' </p><p> Sales Year: '+ $ [SaleAnio] +' </p>.</b></li> <li> We will select the icon to be displayed for this data series and color to identify other.</li></ul></li> <li> We will press add to set the data, after that select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click Create to create the new gadget.</li>
wizard_ayuda_gadget_map_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_map_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>.</li> <li> <b>maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graphic.</li> <li> <b>We will obtain data every x seconds:</b> will be the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which will make the query.</li> <li> <b>Browse:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li> <li> We have the possibility to use the <b>Wizar</b> to generate query.<br> <br>will identify each of the consultations.<br> <br>After creating the query will press add.</li> </ul></li> <li> <b>Measures:</b> select one of the queries defined previously. In the field will attribute type of coordinates an example would be:.</li> <ul> <li> <b>Localizacion coordinates:</b> transformation then we would put something like this: {coordinates: $ 0, type: 'Point '.}.</li> <li> we can define popups icons, this will do in html format <b>html in Popup Icon</b> this could be an example: <b><p> '+ $ [Name] +' </p><p> Sales Day: '+ $ [SaleDay] +' </p><p> Sales Week: '+ $ [Weekly Sale] +' </p><p> Sales Month: '+ $ [Sale] +' </p><p> Sales Year: '+ $ [SaleAnio] +' </p>.</b></li> </ul> <li> We will select the icon to be displayed for this data series and color to identify the others.</li> <li> After this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally will press <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_map_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_map_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b> <br> <br> You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
##heatmap
wizard_ayuda_gadget_desc_heatmap = Steps to create a <b>Heatmap gadget:</b>
wizard_ayuda_gadget_heatmap_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_heatmap_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_heatmap_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_heatmap_direc_des = <li> This will display the data in real time on the map.</li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both on the map.</li> <li> <b>Measures:</b> select the ontology.</li> <li> We will press add to set the data, after that select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click Create to create the new gadget.</li>
wizard_ayuda_gadget_heatmap_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_heatmap_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>.</li> <li> <b>maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graphic.</li> <li> <b>We will obtain data every x seconds.</b> will be the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which will make the query.</li> <li> <b>Browse:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li> <li> We have the possibility to use the <b>Wizar</b> to generate query.<br> <br>will identify each of the consultations.<br> <br>After creating the query will press add.</li> </ul></li> <li> <b>Measures:</b> will select an attribute for Latitude , the length and the value that will at that point.</li> <li> After this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_heatmap_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_heatmap_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b> <br> <br> You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
##imageheatmap
wizard_ayuda_gadget_desc_imageheatmap = Steps to create a <b>Gadget Image Heatmap:</b>
wizard_ayuda_gadget_imageheatmap_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_imageheatmap_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_imageheatmap_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_imageheatmap_direc_des = <li> This will display the data in real time on the map.</li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both on the map.</li> <ul> <li> <b>Measures:</b> <li> select the ontology.</li> <li> <b>X axis:</b> will be for the X position in pixels on the image in its original size.</li> <li> <b>Y axis:</b> will be up to the Y position in pixels on the image in its original size.</li> <li> <b> image URL:</b> direction of the image to be loaded as a background image.</li> <li> <b>minimum-maximum radius:</b> parameters to set the minimum and maximum size of the radius point (the radius of a point will be randomized between the two ends), if a fixed radius you want the same value will both fields.</li> </ul></li> <li> we will press add to set data, after that select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click Create to create the new gadget.</li>
wizard_ayuda_gadget_imageheatmap_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_imageheatmap_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>.</li> <li> <b>maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graphic.</li> <li> <b>We will obtain data every x seconds:</b> will be the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which will make the query.</li> <li> <b>Browse:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li> <li> We have the possibility to use the <b>Wizar</b> to generate query.<br> <br>will identify each of the queries. After creating the query will press add.</li> </ul></li> <li> <b>Measures:</b> <ul> <li> <b>X axis:</b> will be for the . X position in pixels on the image in its original size.</li> <li> <b>axis:</b> will be up to the Y position in pixels on the image in its original size.</li>. <li> <b>Value:</b> intensity point (the scale is dynamically calculated).</li> <li> <b>image URL:</b> direction of the image to be loaded as image background.</li> <li> <b>minimum-maximum radius:</b> parameters to set the minimum and maximum size dot radius (the radius of a will be random point between the two extremes), if you want a fixed radius will be the same value in both fields.</li> </ul></li> <li> After this select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_imageheatmap_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_imageheatmap_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b><br> <br>You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
##htmlexterno
wizard_ayuda_gadget_desc_htmlexterno = Steps to create a <b>Gadget External HTML:</b>
wizard_ayuda_gadget_htmlexterno_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_htmlexterno_ini_des = <li> Create a distinctive name for your gadget and set the <b>URL</b> of the resource that we want to show our gadget can be a URL to an image to a website, etc.</li>
##nubepalabras
wizard_ayuda_gadget_desc_nubepalabras = Steps to create a <b>Gadget Mini Gadget:</b>
wizard_ayuda_gadget_nubepalabras_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_nubepalabras_ini_des = <li> Create a distinctive name for your gadget and select the <b>ThinKP</b> with which to establish the connection.</li>
wizard_ayuda_gadget_nubepalabras_direc = <b>DATA LIVE</b>
wizard_ayuda_gadget_nubepalabras_direc_des = <li> This will show us the real-time data.</li> <li> <b>Maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graph.</li> <li> <b>Measures:</b> We will select a Ontology and one of its attributes, which will take its content to show the palagras in the gadget. We can create up to four mini gadgets.</li> <li> We will press add to confirm the data, after that select a token and our gadge is displayed at the bottom of the screen.<br> <br>Finally, click Create to create the new gadget.</li>
wizard_ayuda_gadget_nubepalabras_query = <b>DATA QUERY</b>
wizard_ayuda_gadget_nubepalabras_query_des = <li> You can view information of ontologies in the Database in Real Time <b>(RTDB)</b> or the Historica <b>(BDH)</b>.</li> <li> <b>maximum values â€‹â€‹represent:</b> will select the maximum number of values â€‹â€‹that will be both in the graphic.</li> <li> <b>We will obtain data every x seconds:</b> will be the time in seconds it will take to update the data.</li> <li> <b>Browse:</b> <ul> <li> <b>ontology:</b> will select the ontology on which will make the query .</li> <li> <b>Question:</b> will write the query format <b> or Native</b> (Only if we consult on RTDB) Can we parameterize values â€‹â€‹with the following nomenclature: $ { "NombreLabel", "format"}, may be the format date, datetime, number or string.</li> <li> We have the possibility to use the <b>Wizar</b> to generate query.<br> <br>After creating the query will press add and select the attribute that take the words to show.</li> </ul></li> <li> After this select a token and our gadge is displayed at the bottom screen.<br> <br>Finally, click <b>Create</b> to create the new gadget.</li>
wizard_ayuda_gadget_nubepalabras_transfdato = <b>DATA CONVERSION</b>
wizard_ayuda_gadget_nubepalabras_transfdato_des = <li> <b>We will use inline JavaScript for example:</b> Math.random () <b>"My value" + $ 0, parseInt ($ 0), parseFloat ($ 0) ...</b><br> <br>You can even access other fields with <b>$ [rutaotrocampo1]</b> to map-reduce and filter in JavaScript such as: $ 0.filter (function (elem, index, array) {return parseFloat (array [ index] [1]) === (new Date ()). getHours ()}). map (function (elem) {return parseFloat (elem [3])}).</li> <li> <b>we can meter if:</b> function () {if ($ 0 == '1') {return 'hello'} else {return 'adios'}} If a data within an instance is an array how bind is concatenating: <b>instance1:</b> {field1: 'sfdf' field2: [1,2,3,4]} <b>instance2:</b> {field1: 'sdsas' field2: [ 5,6,7,8]}.</li>
##html5
wizard_ayuda_gadget_desc_html5 = Steps to create a <b>Gadget HTML5:</b>
wizard_ayuda_gadget_html5_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_html5_ini_des = <li> assign a descriptive name to the gadget.</li>
wizard_ayuda_gadget_html5_transfdato = <b>Running</b>
wizard_ayuda_gadget_html5_transfdato_des = <li> We will write our code <b>HTML5</b> in the window black background.</li> <li> We will press Regenerate to see the result in the window of white background.</li> <li> You can find the specifications of this language in this <b>URL</b>: <b>https://www.w3.org/TR/html5/</b>.</li> <li> When we finish we will keep the result pressing the <b>Create</b>.</li>
##shini
wizard_ayuda_gadget_desc_shini = Steps to create a <b>R Shiny Gadget:</b>
wizard_ayuda_gadget_shini_ini = <b>INITIAL DATA</b>
wizard_ayuda_gadget_shini_ini_des = <li> assign a descriptive name to the gadget.</li>
wizard_ayuda_gadget_shini_funcionamiento = <b>Running</b>
wizard_ayuda_gadget_shini_funcionamiento_des = <li> <b>ui.R:</b> This section will include the code responsible for R Shiny gadget interface, ie, the part that generates all the HTML, styles and JavaScript.server.R: In . this section code R Shiny, corresponding to the part of server Gadget.</li> <li> <b>files WWW include:</b> by Drag & Drop may include files in this section, which will be used by Gadget, mainly oriented interface portion including style sheets, javaScript libraries or multimedia content.</li> <li> <b>the editor allows options such as:</b> Select by columns of text by holding down the key <b>Alt</b>. EdiciÃ³n full screen <b>F11</b> word search <b>Ctrl + F</b> Coloring keywords, closing keys . we can take.<br> <br>reference tutorials like this: <b>http://shiny.rstudio.com/tutorial/lesson1/Cuando</b> finish will keep the result by pressing the <b>Create</b>.</li>.

##wizard ayuda dashboard
wizard_ayuda_dashboard_ayuda = Help
wizard_ayuda_dashboard_informacion = Information
wizard_ayuda_dashboard_desc = In this screen we will set the global configuration of our <b>Dashboard</b>. We must know that they are structured by <b>pages</b> that we can access from the menu. And each page will be composed of <b>distributed gadgets</b>.
wizard_ayuda_dashboard_datos = <b>INITIAL DATA</b>
wizard_ayuda_dashboard_datos_des = <li> <b>Name:</b> assign a descriptive name to our Dashboard.</li><li> <b> Connection Type: </ b> We will choose the connection channel between the Direct Web Remoting (DWR) or Web Socket </li> <li> <b>Image logo:</b> can select an image to be displayed on the top bar, which will press to select file, if we delete the image and that does not appear press in the trash icon next to the button to select file.</li> <li> <b>Style:</b> we can choose between different predefined styles for sofia2 dashboards. Also, if we choose Custom Style we can create a style following the line of google material to which only have to choose a primary color and a secondary.</li> <li> <b>Menu:</b> will assign an orientation horizontal or vertical to our menu.</li> <li><b>JSON:</b> We can introduce a JSON file ({"tag1": {"en": "value", "es": "value"}, "tag2": {"en": "value", "es": "value"}, ...}) for the translation of the texts that we insert into our Dashboard. </li> <li> When we finish <b>create our dashboard</b> will press the button <b>Create:</b>.</li> <li> <b>new page:</b> will press this button to add a new page after clicking directs us to the editing screen page, if you click here <b>Create</b> then we can see our new page in the list of Dashboard pages.</li>
wizard_ayuda_dashboard_datos_crear_pagina = <b>LIST OF PAGES Dashboards</b>
wizard_ayuda_dashboard_datos_crear_pagina_des = We will show the created pages, next to their name have the following options: <li> <b>Display URL:</b> We copied to clipboard <b>URL</b> to go directly to our page dashboard.</li> <li> <b>View Dashboard:</b> We ran to the Dashboard page in presentation mode.</li> <li> <b>Update:</b> We directed to the page Dashboard, in edit mode, we can add delete gadgets, rename, structure, etc.</li> <li> <b>delete:</b> Eliminates the Dashboard page.</li>
##wizard ayuda dashboard edit
wizard_ayuda_dashboard_edit_des = In this screen we define the name of the page structure, gadgets that make up and disposal.
wizard_ayuda_dashboard_edit_datos = <b>OPERATION BUTTONS</b>
wizard_ayuda_dashboard_edit_datos_des = <li> <b>Top bar:</b> Show the general logo on the left in case it has been saved in the global configuration of the dashboard. On the right side we see the <b>Sofia2</b> logo and a button with three dots, which serves to display the menu.</li><li><b>Menu:</b>If it has a horizontal orientation it will be displayed under the top bar, if it has a vertical height it will be displayed on the left side of the screen and contain the icons and names of the different pages.</li><li> <b>Back button:</b> return to global settings without saving changes.</li> <li> <b>Create / Save button:</b> The page.</li> <li> <b>Create Gadget button:</b> Allows us to create a gadget without leaving this screen.</li> <li> <i class="glyphicon glyphicon-plus-sign" style="float: right;margin-right: 99px;"></i><b>Button add new widget:</b> This button allows you to add gadgets to our page, we just have to choose from the list that displays the gadget type.</li><li><i class="glyphicon glyphicon-cog" style="float: right;margin-right: 99px;"></i><b>Edit button dashboard:</b> After clicking it, the configuration menu of the page appears.</li>
wizard_ayuda_dashboard_edit_config_pagina = <b>HOW TO SETUP PAGE?</b>
wizard_ayuda_dashboard_edit_config_pagina_des = <li> will activate the edit mode by pressing the button</li><i class="glyphicon glyphicon-edit" style="margin-left:-20px; margin-top:-5px;"></i><li> press the button and see the configuration screen.</li> <i class = "glyphicon glyphicon-cog" style = "margin-left: -20px; margin-top: -5px;"> </i> <li> this screen will give a title to our.</li> <li> we will select an icon to display the menu.</li> <li> we can select an image to be placed in the bottom of the page, for this will press in <b>Choose file</b> and select a file to upload.</li> <li> We will select the structure (rows and columns) in which the page will be divided.</li>
wizard_ayuda_dashboard_edit_config_gadget = <b>HOW TO ADD A GADGET?</b>
wizard_ayuda_dashboard_edit_config_gadget_des = <li> Activate edit mode by pressing.</li><i class="glyphicon glyphicon-edit" style="margin-left:-20px; margin-top:-5px;"></i><li> Press the button</li><i class="glyphicon glyphicon-plus-sign" style="margin-left:-20px; margin-top:-5px;"></i><li>Select from the list the gadget we want to include</li><li> We will see a panel with buttons in the top right.</li><li> Click on this icoco where we will see a menu of the gadget where we can put a title to the header of the panel that contains the gadget.</li><i class="glyphicon glyphicon-cog" style="margin-left:-20px; margin-top:-5px;"></i><li>In the <b>Gadget</b> field we select the one we want to display.</li><li> Click <b>Close</b> and we already have our gadget on the page.</li>
wizard_ayuda_dashboard_edit_config_gadget_pagina = <b>HOW TO LOCATE THE GADGET IN OUR SITE?</b>
wizard_ayuda_dashboard_edit_config_gadget_pagina_des =<li> We will be able to move our gadget using the icon, between the different columns and rows that we have defined in the structure.</li><i class="glyphicon glyphicon-move" style="margin-left:-20px; margin-top:-5px;"></i><li> We can resize the high by placing us at the bottom edge of the panel of each gadget and dragging it up or down.</li><li><b>Set up a Master Gadget:</b>If we have defined in gadgets of pie or gadget of bar the attribute <b>Exchange Axis</b>Â We can use a gadget <b>Table as Master Gadget</b> And when we select one of their rows they will dynamically update the data of these gadgets.</li><li><b>Collapse Widget:</b> This option that appears in the configuration menu of the gadget gives us the option to delete the top or bottom space that separates the gadget from above or below it, which are visually overlapping.</li><li><b>Expand my gadget:</b>In the bar of the panel of each gadget appears the button that if we press it we will see the gadget with a bigger size, being able to appreciate the details.</li>

wizard_visualizar_proyectos_existentes=Choose an existing project on which you want to make a new project. To edit the project and create a new one, click on the options button.

##MENSAJES BOTS
menu_category_bots_label   =  BOTS
menu_item_bots_listar_label   =  My Bots
menu_item_bots_scripts_listar_label   =  My Knowledge Bases

bots_breadcrumb   =  Bots
bots_breadcrumb_listar   =  My bots
bots_breadcrumb_consultar   =  View Bot
bots_breadcrumb_crear   =  Create Bot
bots_breadcrumb_update   =  Edit Bot

bots_listado_header_nombre   =  Identification
bots_listado_header_propietario   =  User
bots_listado_header_descripcion   =  Description
bots_listado_header_opciones   =  Options

bots_formulario_bot   =  Bots
bots_formulario_identificacion   =  Identification
bots_formulario_categoria   =  Categories
bots_formulario_bot_id   =  idbot
bots_formulario_botscripts   =  Knowledge Bases
bots_formulario_button_talk   =  Chat

bots_formulario_botscripts_disponibles   =  Available
bots_formulario_botscripts_seleccionados   =  Selected

bots_formulario_img_logo  =  Image Logo
bots_formulario_img_background  =  Background Image

botscripts_breadcrumb   =  bots
botscripts_breadcrumb_listar   =  my knowledge bases
botscripts_breadcrumb_crear   =  create knowledge base
botscripts_breadcrumb_mostrar   =  view knowledge base
botscripts_breadcrumb_update = edit knowledge base

botscripts_listado_header_nombre   =  Identification
botscripts_listado_header_propietario   =  User
botscripts_listado_header_descripcion   =  Description
botscripts_listado_header_categoria   =  Categories
botscripts_listado_header_publico   =  Public
botscripts_listado_header_opciones   =  Options

botscripts_listado_button_url  =  View URL
botscripts_listado_button_play  =  Play

botscripts_formulario_button_crear_botscript   =  Create New
botscripts_formulario_usuario   =  User

botscripts_formulario_nombre  =  Identification
botscripts_formulario_publico   =  Public
botscripts_formulario_languagescript   =  Language
botscripts_formulario_script   =  Knowledgebase
botscripts_formulario_categoria   =  Categories
botscripts_formulario_descripcion   =  Description

bots_formulario_button_crear_bot   =  Create Bot
bots_formulario_button_buscar   =  Search
bots_formulario_button_cancelar   =  Cancel
bots_formulario_button_crear   =  Create
bots_formulario_button_borrar   =  Delete
bots_formulario_button_modificar   =  Edit
bots_formulario_button_guardar   =  Save
bots_formulario_button_test   =  Test Bot

bots_validacion_identificador  =  The identifier may only contain alphanumeric characters and underscores ("_")
bots_formulario_generar_nombre_vacio_error  =  The identifier field is required
bots_formulario_generar_nombre_existente_error  =  The bot identifier is already in use
botsscripts_formulario_generar_nombre_existente_error   =  The knowledge base identifier is already in use

bots_formulario_conversations = Chats
botscripts_formulario_operaciones_disponibles = Available Methods
botscripts_formulario_button_anadir = Add
botscripts_formulario_operacion_funcion = Add Function

bots_listado_header_ultima_conversacion = Latest Conversation
bots_listado_header_user = User
bots_listado_header_bot = Bot

##crear dashboard wizard
crear_dashboard_wizard_datos=Initial data
crear_dashboard_wizard_datos_desc= Next, we'll assign a descriptive name to our <b>Dashboard</b> and dial <b>public</b> our <b>Dashboard</b>.
crear_dashboard_wizard_logo=Image Logo
crear_dashboard_wizard_logo_desc=We can select an image that will be displayed in the upper bar, for this we will click on select file, if we want to delete the image and that does not appear any we will click on the icon of the trash next to the button to select file.
crear_dashboard_wizard_estilo=Style
crear_dashboard_wizard_estilo_desc=We can choose between different predefined styles for <b>Sofia2 Dashboards</b>. In addition, if we choose <b>Custom Style</b> we can create a style following the line of google material, for which we only have to choose a primary color (background) and a secondary color (buttons).
crear_dashboard_wizard_orientacion=Orientation menu
crear_dashboard_wizard_orientacion_desc=We will assign a <b>horizontal or vertical orientation</b> to our menu, as we want to visualize it.
crear_dashboard_wizard_nueva_pagina=New page
crear_dashboard_wizard_nueva_pagina_desc=Click this button to add a new page, after clicking it, it will take you to the page editing screen, once inside the edition, if we click on the <b>Create</b> button, we will be able to see our new page in the page list Of the Dashboard.
crear_dashboard_wizard_finalizar=Finalize
crear_dashboard_wizard_finalizar_desc=To finish and create our <b>Dashboard</b>, we will click on the <b>Create</b> button in case you do not want to save the changes we will press <b>Cancel</b>. 
crear_dashboard_wizard_tipo_conexion_desc=We will choose the connection channel between the Direct Web Remoting (DWR) or Web Socket
crear_dashboard_wizard_jsoni18n = JSON label
crear_dashboard_wizard_jsoni18n_desc = We can introduce a file type JSON ({"label1": {"en": "value", "es": "value"}, "label2": {"en": "value", "es": "value" }, ...}) for the translation of the texts that we insert into our Dashboard.

#WIZARD GADGETS
wizard_gadget_introducir_nombre=Enter a distinctive name for your Gadget
wizard_gadget_introducir_ontologia=Select the ontology on which the queries will be performed and from which the data will be obtained
wizard_gadget_introduzca_streaming=Select Streaming if you want to get real-time information from the RTDB or QUERY if you want to obtain the information by creating a query about the BDTR or BDH BBDDs
wizard_gadget_introduzca_bbdd=Select the database on which to query and refresh the information in seconds
wizard_gadget_introduzca_query=You can manually enter the query or use the wizard
wizard_gadget_introduzca_finalizar=To end and create the gadget press the OK button if you have changed your mind and want to return to the menu without saving Cancel
wizard_gadget_introducir_nombre_seguir = Enter a name to follow
wizard_gadget_seleccione_ontologia_seguir = Select an ontology to be able to follow
wizard_gadget_guardado = Saved successfully
wizard_gadget_finalizar=Finish
wizard_gadget_query=Query
wizard_gadget_tipo_bbdd=BBDD type
wizard_gadget_tipo_conexion=Connection type
wizard_gadget_ontologia=Ontology
wizard_gadget_nombre=Name
wizard_gadget_segundos= seconds
wizard_gadget_actualizar=Update
wizard_gadget_seleccione_tipo_gadget=Select the way you represent the information
wizard_gadget_preview=Preview
wizard_gadget_datos_ontologia = Data Ontology
wizard_gadget_atributos = Attributes
wizard_gadget_medidas = Measures
wizard_gadget_latitud_longitud=Longitude/Latitude
wizard_gadget_transformacion = Transformation
wizard_gadget_eje_x = X axis
wizard_gadget_eje_y = Y axis

wizard_gadget_diametro = Diameter
wizard_gadget_atributo = Attribute
wizard_gadget_Longitud = Longitude
wizard_gadget_Latitud= Latitude
wizard_gadget_colormaxmin = Scale colors (maximum - minimum)
wizard_gadget_info_table_type = Drag the attributes you want to represent in Table panel measures. You can rename the column and apply a transformation of data by column
wizard_gadget_info_area_type = Drag the attributes you want to represent in the graph area Measures panel, note that the Y axis must be a numeric value
wizard_gadget_info_bar_type = Drag the attributes you want to represent in the graph panel Columns Measures, note that the Y axis must be a numeric value
wizard_gadget_info_pie_type = Drag the attributes you want to represent in the graph or pie Pie Measures panel, note that the attribute or feature should be a text attribute type. You can not put negative values 
wizard_gadget_info_simplevalue_type = Drag the field you want displayed in graph Simple Value. You can rename, add a transformation to the data and add a URL of an image to be displayed in the component
wizard_gadget_info_cloudwords_type = Drag the field you want displayed in graph word cloud. You can make a transformation of data
wizard_gadget_info_gauge_type = Drag the field you want displayed in graph Indicators. You can rename, add a transformation to the data and adjust the minimum and maximum value	
wizard_gadget_info_scatter_type = Drag the attributes that define the bubble chart measures the area. Note that the first value defines the elements, the second corresponds to the X axis, the third axis and the fourth attribute is the depth that represents
wizard_gadget_info_map_type = Drag the attributes that correspond to the longitude and latitude to the Area Longitude / Latitude. You can change the name of the map layer, you can change the icon and color by clicking on the icon on the panel measures. Select the attributes you want to appear in the tooltip points Map
wizard_gadget_info_bordermap_type = Drag the attributes you want to represent on the map to the Measures panel, note that the attribute or characteristic must be a text-type attribute. Negative values â€‹â€‹can not be entered. Once dragged you must select the maximum and minimum color to represent in the scale of values â€‹â€‹and the map on which you want to represent the values. These maps are introduced in the Ontology BorderMap, for any modification or extension will have to accede to this Ontology
dashboard_edit_editar_dashboard=Edit Dashboard
dashboard_edit_nombre_de_la_pagina=Page name
dashboard_edit_icono_del_menu=Menu icon
dashboard_edit_imagen_fondo=Background image
dashboard_edit_seleccionar=Select
dashboard_edit_eliminar=Delete
dashboard_edit_grids=Grids
dashboard_edit_Volver=Close

dashboard_edit_grid_estandar=STANDARD GRID
dashboard_edit_grid_custom=CUSTOM GRID
dashboard_edit_paneles=GROUP ROWS
dashboard_edit_Aplicar=Apply
dashboard_edit_Aniadir_fila=Add Row
dashboard_edit_Fila=Row
dashboard_edit_Texto=Title
dashboard_edit_Mostrar_Panel=Group Row

widget_add_aniadir_nuevo_gadget=Add new gadget
widget_add_descripcion=Select one of the gadgets already created that are in the table or create a Markdown type by clicking on its icon
widget_add_tipo=Type
widget_add_Volver=Close
widget_add_markdown=Create Markdown gadget

widget_selector_aniadir_nuevo_selector=Add New Selector
widget_selector_descripcion=A selector can be formed by a filter or a set of them. <br> Press to add to create a new filter. <br> Select the type of filter. Choose the gadgets that will be filtered. <br> For each gadget the parameter by which it will be filtered, you can give a name to the filter, the gadget and the field selected as master will get the values
widget_selector_anadir_filtro=Add Filter
widget_selector_borrar_filtro=Clear Filter
widget_selector_tipo_filtro=Type Filter
widget_selector_gadgets=Gadgets
widget_selector_nombreGadget=name Gadget
widget_selector_parametro=parameter
widget_selector_nombre_asignado=assigned name
widget_selector_maestro=Master
widget_selector_guardar=Save
widget_selector_volver=Close
widget_selector_simple=simple
widget_selector_multiple=multiple
widget_selector_fechas=date range
widget_selector_tipo=Type
widget_selector_string=String
widget_selector_number=Number
widget_selector_timestamp=Timestamp

widget_edit_titulo=Title
widget_edit_volver=Back

widget_gadgetedit_gadget=Gadget
widget_gadgetedit_gadget_maestro=Gadget Master
widget_gadgetedit_eliminar_separacion=Delete Gadget Separation
widget_gadgetedit_arriba=Top
widget_gadgetedit_abajo=Bottom

widget_title_refrescar=refresh
widget_title_mover=move
widget_title_minimizar=minimize
widget_title_maximizar=maximize
widget_title_editar_gadget=edit gadget
widget_title_editar_configuracion=configure gadget
widget_title_descargar=download
widget_title_eliminar=delete

dashboard_title_nuevo_gadget=Add a new gadget
dashboard_title_nuevo_selector= Add a new selector
dashboard_title_configuracion_dashboard=Page Setup
dashboard_title_edit_mode=Edit Mode

widget_markdown_contenido=Markdown Code
dashboard_tipo_conexion=Type Connection

#Búsqueda en documentación
search_results=Search results
search_results_founds=results found
search_button_back=Back
search_button_close=Close

#Pantalla de error inesperado
uncaught_exception_titulo=Unexpected error
uncaught_exception_inicio=Back to main page
uncaught_exception_reportar_error=Report error
uncaught_exception_guardar=Report
uncaught_exception_cancelar=Cancel
uncaught_exception_comments_dialogtitle=Report a commentary
uncaught_exception_comments_label=Commentary

# Spring boot admin
springbootadmin.menu_text=Spring Boot administration
springbootadmin.disabled_text=This feature is disabled (see: {0} property value).
contenedorkps_aplication_springboot=Spring Boot Application



# DESKTOP
menu_item_desktop_crear_label = Create Desktop
desktop_formulario_button_url = URL
desktop_formulario_button_ver = Open Desktop
desktop_listado_button_editar = Edit
desktop_listado_button_eliminar = Remove
menu_category_DESKTOP_crear = New Desktop
desktop_formulario_name = Name
desktop_formulario_url = URL
desktop_usuarios = Users
desktop_asociar_usuarios_al_escritorio = Associate Users to the Desktop
desktop_usuarios_asociasdos_al_escritorio = Associate Users To Desktop:
desktop_elementos_escritorios = Desktop Applications
desktop_crear_elementos_escritorios = Create Desktop Application
desktop_aplicacion_title = Title
desktop_aplicacion_descripcion = Description
desktop_imagen_seleccionada = Image Application
desktop_button_eliminar = Remove
desktop_aplicacion_tipo = Type Application
desktop_aplicacion_dashboard = Dashboard Sofia2
desktop_aplicacion_proyectoweb = Web Project Sofia2
desktop_aplicacion_aplicacioncontrolada = Controlled Application
desktop_aplicacion_nocontrolada = External Application
desktop_descripcion_configuracion = Settings
desktop_aplicacion_add = Add Application
desktop_aplicacion_titulo = Title
desktop_aplicacion_icono = Icon
desktop_aplicacion_url = Url
desktop_aplicacion_title_url = URL
desktop_aplicacion_contenido = Content
desktop_descripcion_style = You can adapt to your needs the CSS that will be loaded on the Desktop
desktop_descripcion_js = You can adapt the JS that will be loaded when you start the Desktop
desktop_descripcion_internacionalizacion = Apply internationalization, creating a json with this format: {\"tag\": {\"country code\": \"translation\", \"other country code\": \"translation\"}, {...} Voltage V \",\" en \":\" Voltage V \"}}
desktop_dialogo_error_name_obligatorio = You must enter a name with more than 5 characters
desktop_dialogo_error_seleccione_un_miembro = You must select at least one user
desktop_dialogo_error_name_existente = A desktop with that name already exists.
desktop_dialogo_error_crear_escritorio = Error creating Desktop
desktop_aplicacion_tipo_ventana = Display Mode
desktop_aplicacion_ver_ventana = Window
desktop_aplicacion_ver_pcompleta = Fullscreen
desktop_aplicacion_habilitada = Enabled
desktop_error_create_desktop = There was an error creating the Desktop
desktop_lista_mi_tabla = DESKTOPS CREATED BY ME
desktop_lista_con_acceso_tabla = DESKTOPS I HAVE ACCESS
menu_item_desktop_modificar_label = Modify Desktop
desktop_aplicacion_mod = Modify Application
desktop_boton_mod = Update
desktop_error_modificar_desktop = An error occurred while editing the Desktop
desktop_aplicacion_nuevo_token = Generate Token
desktop_aplicacion_token = Token
desktop_aplicacion_alto_ventana = Window Height
desktop_aplicacion_ancho_ventana = Window Width
desktop_creacion_correcta = The Desktop has been created correctly.
desktop_modificacion_correcta = The Desktop has been modified correctly.
admin_regenerar_clave_jwt = Regenerate Password JWT Desktops
desktop_menu_escritorio = Desktop
desktop_menu_descripcion = Description
desktop_menu_titulo_header = Select a Desktop
desktop_menu_titulo_ya_existente=Enter another title for the application, there should be no duplicate titles.
# MENU DESKTOP
menu_category_DESKTOP_label=DESKTOPS
menu_item_DESKTOP_label=My Desktops
tooltip_desktop=The Desktop allows us to access applications, dashboards and projects in a centralized way.
# NEW-Elements
#  MAIN Menu
menu_home=Home
#  DATATABLES LANG OPTION OBJ.
datatables_lang={\"decimal\": \"\", \"emptyTable\": \"No Entries\", \"info\": \"Showing _START_ to _END_ of _TOTAL_ Entries\", \"infoEmpty\": \"0 Entries \", \"infoFiltered\": \"(Filtered from _MAX_ total Entries)\",\"infoPostFix\":\"\",\"thousands\":\",\",\"lengthMenu\":\"Showing _MENU_ Regs.\",\"loadingRecords\": \"Loadding...\",\"processing\":\"Proccessing...\",\"search\":\"Search:\",\"zeroRecords\":\"No matching records found\",\"paginate\": {\"first\":\"First\",\"last\":\"Last\",\"next\":\"&gt;\",\"previous\": \"&lt;\"}}
#  HEADER BUTTONS
sign_out = LogOut

## LOGIN PAGE
login.contrasena.pattern = Must contain at least: one uppercase letter, one lowercase letter and a number or simbol. Password must be between 7 and 20 characters.
login.title=Control Panel Login
login.register.created = User created. You need to loggin in.
login.new=New Account
login.error= Invalid username and password.
login.error.email.duplicate = There is already an user with this email.
login.error.register=This user already exist.
login.logout=You have been logged out.
login.register.created=User created. It is necessary to authenticate.
login.user.exist=This user exists in the system. Please select another userId. 


## USERS
users.my=Manage Users


## API MANAGER 
apimanager.breadcrumb						=API MANAGER
apimanager.breadcrumb.create				=New API
apimanager.breadcrumb.subscriptions			=My Subscriptions
apimanager.breadcrumb.apis.subscriptions	=API Subscriptions
apimanager.breadcrumb.show					=View API
apimanager.breadcrumb.edit					=Edit API
apimanager.breadcrumb.list					=My APIs
apimanager.breadcrumb.token					=My Users Keys
apimanager.breadcrumb.authorizations		=APIs Authorizations
apimanager.breadcrumb.prev					=My APIs

apimanager.template.create					=Create New API
apimanager.template.show					=API Data
apimanager.template.edit					=Edit existing API
apimanager.template.list					=My APIs
apimanager.template.token					=My Users Keys
apimanager.template.autorizations			=Create API Authorization

apimanager.id								=Identification
apimanager.numversion						=Version
apimanager.category							=Categoy
apimanager.apitype							=Api Type
apimanager.ontology							=Ontology
apimanager.limit							=API limit
apimanager.apilimit							=Requests per minute
apimanager.cache							=Caching of API results
apimanager.cachetimeout						=Cache Timeout(minutes)
apimanager.public							=Public
apimanager.endpoint							=EndPoint base
apimanager.image							=Image
apimanager.description						=Description
apimanager.metainf							=Meta-inf
apimanager.operations						=Operations
apimanager.GET								=GET
apimanager.GETSQL							=GET(query)
apimanager.POST								=POST
apimanager.PUT								=PUT
apimanager.PATCH							=PATCH
apimanager.DELETE							=DELETE
apimanager.CUSTOMSQL						=CUSTOM(query)
apimanager.state							=State
apimanager.state.CREATED					=Created
apimanager.state.DEVELOPMENT				=Development
apimanager.state.PUBLISHED					=Published
apimanager.state.DEPRECATED					=Deprecated
apimanager.state.DELETED					=Deleted
apimanager.state.action.CREATE				=Create
apimanager.state.action.DEVELOPMENT			=Development
apimanager.state.action.PUBLISH				=Publish
apimanager.state.action.DEPRECATE			=Deprecate
apimanager.state.action.DELETE				=Delete
apimanager.category.ALL						=All
apimanager.category.ADVERTISING				=Advertising
apimanager.category.BUSINESS				=Busines
apimanager.category.COMMUNICATION			=Communication
apimanager.category.EDUCATION				=Education
apimanager.category.ENTERTAINMENT			=Entertaiment
apimanager.category.MEDIA					=Media
apimanager.category.MEDICAL					=Medical
apimanager.category.OTHER					=Other
apimanager.category.SOCIAL					=Social
apimanager.category.SPORTS					=Sports
apimanager.category.TOOLS					=Tools
apimanager.category.TRAVEL					=Travel
apimanager.apiType.rest						=Publish Ontology as REST API
apimanager.auth								=Authorizations
apimanager.auth.description					=User's API Authorizations
apimanager.list.auth.user					=User
apimanager.list.auth.username				=User Name
apimanager.list.auth.apiversion				=Api - Version
apimanager.operations.method				=Method
apimanager.operation.GET					=GET
apimanager.operations.name					=Name
apimanager.customsql.query					=Query
apimanager.customsql.paramsquery			=QUERY PARAMETERS
apimanager.customsql.paramquery.nodefined	=The Query has not parameters
apimanager.customsql.configuration			=QUERY CONFIGURATION
apimanager.customsql.querytype				=Query Type
apimanager.customsql.targetBD				=Target database
apimanager.customsql.formatresult			=Result Format
apimanager.customsql.descripcion			=Description
apimanager.token.dateCreated				=Creation Date
apimanager.token							=Token

apimanager_nombre_error=El campo Nombre es obligatorio
apimanager_endpoint_error=El campo EndPoint es obligatorio
apimanager_descripcion_error=El campo Descripción es obligatorio
apimanager_descripcion_operaciones_error = La descripción de las operaciones es obligatoria
apimanager_metainf_error=El campo MetaInf es obligatorio
apimanager_error_campos=Complete todos los campos
apimanager_error_formato_nombre=Introduzca un formato correcto para el nombre
apimanager_error_formato_ruta=Introduzca un formato correcto para la ruta
apimanager_error_operacion_identificacion=El campo Nombre es obligatorio
apimanager_error_querystring_identificacion=El campo Nombre es obligatorio
apimanager_error_header_identificacion=El campo Nombre es obligatorio
apimanager_error_operacion_existe=Ya existe una operacion con ese Nombre
apimanager_error_querystring_existe=Ya existe un parametro con ese Nombre
apimanager_error_header_existe=Ya existe un header con ese Nombre
apimanager_error_timeout=El valor del timeout debe estar comprendido entre
apimanager_error_apilimit=El valor del limite debe estar comprendido entre

apimanager_customsql_error_required=A query is required
apimanager_customsql_error_query=A valid query is required
apimanager_customsql_error_query_params=At least one query parameter is invalid
apimanager_customsql_error_query_ontology=The query must include the selected ontology